.program qtr_sensor_counter
  ; TODO: to save instruction space, can we manually exec all of this from
  ; the CPU and only do 'out pindirs, 7' here?

  mov osr, null      ; set pins to inputs
  out pindirs, 7

  mov osr, ~null     ; load 1023 (10 bits of 1s) into y as a counter
  out y, 10

  ; TODO: make all loop iterations take the same number of cycles
loop:

  mov isr, null      ; reset shift counter and read 7 pins into ISR
  in pins, 7

  mov osr, y         ; save y counter in OSR

  mov y, isr         ; put new pin values in y
  jmp x!=y change    ; compare old pin values (x) to new pin values (y)
  jmp decrement

change:
  mov x, y           ; save new pin values in x

  ; save and write data
  in osr, 16         ; time
  in x, 16           ; pin values
  ; TODO: we already have pin values sitting in the ISR; the line above
  ; can be removed as long as make sure we put enough data in the OSR to
  ; reach the autopush threshold

decrement:
  mov y, osr         ; restore y counter
  jmp y-- loop

finish:
  ; TODO: can we do this in the CPU to save space?
  mov osr, ~null     ; set pins back to outputs
  out pindirs, 7

  in y, 32          ; Send 0xFFFFFFFF to tell the CPU we are done.
                    ; TODO: why is this not needed in the Python code,
                    ; but somehow the CPU still receives 0xFFFFFFFF?
.wrap_target

; TODO: make the Python code the same as this; e.g. should use wrap_target
; and accurate timing with delay slots
